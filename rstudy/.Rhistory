table (iris.pred, test$Species)
confusionMatrix(test$Species, iris.pred)
idx <- sample(2, nrow(iris), replace=T, prob=c(0.6, 0.4))
iris[idx]
train <- iris[idx==1,]
test  <- iris[idx==2,]
iris.train <- ctree(Species~., data=train)
plot(iris.train)
iris.pred <- predict(iris.train, newdata=test)
table (iris.pred, test$Species)
confusionMatrix(test$Species, iris.pred)
idx <- sample(2, nrow(iris), replace=T, prob=c(0.6, 0.4))
iris[idx]
train <- iris[idx==1,]
test  <- iris[idx==2,]
iris.train <- ctree(Species~., data=train)
plot(iris.train)
iris.pred <- predict(iris.train, newdata=test)
table (iris.pred, test$Species)
confusionMatrix(test$Species, iris.pred)
install.packages("deepnet")
df1 <- data.frame(id=c(1,2,3), age=c(20,30,40), name=c('a','b','c'))
df1
class(df1)
df2 <- data.table(df1)
?data.table
install.packages("data.table")
df2 <- data.table(df1)
library(data.table)
df2 <- data.table(df1)
df2
class(df2)
write.csv(df1, file = 'test.csv')
df3 <- read.csv('test.csv')
df3
class(df3)
getwd()
filename = 'test.csv'
write.csv(df1, file = filename)
getwd()
df3 <- read.csv(filename)
class(df3)
df3
save.image(df3)
rm (df3)
load(df3)
df3
load("df3")
df3 <- read.csv(filename)
class(df3)
save.image("df3")
rm (df3)
load("df3")
df3
class(df3)
install.packages("sqldf")
sqldf("select * from iris")
library(sqldf)
sqldf("select * from iris")
sqldf("select * from iris limit 10")
sqldf("select * from iris where species='virginica' limit 10")
sqldf("select [Sepal.Length] from iris where species='virginica' limit 10")
v = sqldf("select [Sepal.Length] from iris where species='virginica' limit 10")
v
install.packages(c("lattice", "doParallel"))
install.packages(c("lattice", "doParallel"))
install.packages(c("lattice", "doParallel"))
install.packages(c("lattice", "doParallel"))
install.packages(c("lattice"))
install.packages(c("lattice"))
install.packages(c("lattice"))
install.packages(c("doParallel"))
library(doParallel)
registerDoParallel(7)
install.packages("e1071")
library(e1071)
str(cars)
summary(cars)
max(cars$speed)
summary(mtcars)
plot(mtcars$mpg)
plot(sort(mtcars$mpg))
summary(datasets::iris)
colnames(datasets::iris)
data(iris)
iris
colnames(iris3)
head(iris, n=10)
tail(iris, n=5)
?iris
?iris3
?mtcars
?sample
install.packages("party")
library('party')
library(caret)
idx <- sample(2, nrow(iris), replace=T, prob=c(0.6, 0.4))
iris[idx]
train <- iris[idx==1,]
test  <- iris[idx==2,]
iris.train <- ctree(Species~., data=train)
plot(iris.train)
iris.pred <- predict(iris.train, newdata=test)
table (iris.pred, test$Species)
confusionMatrix(test$Species, iris.pred)
library(data.table)
df1 <- data.frame(id=c(1,2,3), age=c(20,30,40), name=c('a','b','c'))
df1
class(df1)
df2 <- data.table(df1)
class(df2)
filename = 'test.csv'
write.csv(df1, file = filename)
getwd()
df3 <- read.csv(filename)
class(df3)
df3
save.image("df3")
rm (df3)
load("df3")
df3
class(df3)
install.packages("sqldf")
library(sqldf)
sqldf("select * from iris where species='virginica' limit 10")
v = sqldf("select [Sepal.Length] from iris where species='virginica' limit 10")
library(doParallel)
registerDoParallel(7)
library(e1071)
rf1 <- train(Species~., data=train, method="rf")
library(caret)
rf1 <- train(Species~., data=train, method="rf")
library(caret)
library(caret)
install.packages("lattice")
library(caret)
rf1 <- train(Species~., data=train, method="rf")
predict(rf1, newdata=test, test$Species)
predict(rf1, newdata=test)
table(predict(rf1, newdata=test), test$Species)
table(predict(svm1, newdata=test), test$Species)
svm1 <- train(Species~., data=train, method="svm")
table(predict(svm1, newdata=test), test$Species)
svm1 <- train(Species~., data=train, method="svm")
svm1 <- train(Species~., data=train, method="svmRadial")
table(predict(svm1, newdata=test), test$Species)
confusionMatrix(predict(rf1, newdata=test), test$Species)
confusionMatrix(predict(svm1, newdata=test), test$Species)
c<-1:5
c
rep(c,2)
rep(c,each=2)
rep(c,each=2) %%2 == 0
rep(c,each=2)[rep(c,each=2) %%2 == 0]
z <- 1
z
print(z)
(z<-1)
y<-c("ECG","Eric","Tim","Joshua")
y
c(1+2,2-3,3*4,4/5)
x1<-c(0,1,1,2,3)
x2<-c(5,8,13,21,34)
(x3<-c(x1,x2))
1:5
9:0
rep(1:5)
rep(1:5, 2)
install.packages("ggplot2movies")
library(ggplot2)
library(ggplot2movies)
data("movies", package="ggplot2movies")
summary(movies)
paste("a",'b','c', sep=',')
paste("a",'b','c', sep='|')
substr("teatlkjalsfj saf", 1,5)
substr("teatlkjalsfj saf", 5,5)
substr("teatlkjalsfj saf", 5,15)
ss<-c('af','asdf',fd')
substr(ss, 1,2)
ss<-c('af','asdf','fd')
ss<-c('af','asdf','fd')
substr(ss, 1,2)
iris
iris[1:4]
as.matrix(iris[1:4])
iris.mat <- as.matrix(iris[1:4])
class(iris.mat)
iris.mat
iris.mat[1:5,]
iris.mat[,1:2]
iris.mat[,3:4]
iris.mat[1,5,3:4]
iris.mat[1:5,3:4]
rm(iris.mat)
as.matrix(iris[1:4])
iris.mat <- as.matrix(iris[1:4])
books
authors <- data.frame(
surname = I(c("Tukey", "Venables", "Tierney", "Ripley", "McNeil")),
nationality = c("US", "Australia", "US", "UK", "Australia"),
deceased = c("yes", rep("no", 4)))
books <- data.frame(
name = I(c("Tukey", "Venables", "Tierney",
"Ripley", "Ripley", "McNeil", "R Core")),
title = c("Exploratory Data Analysis",
"Modern Applied Statistics ...",
"LISP-STAT",
"Spatial Statistics", "Stochastic Simulation",
"Interactive Data Analysis",
"An Introduction to R"),
other.author = c(NA, "Ripley", NA, NA, NA, NA,
"Venables & Smith"))
authors
books
m1 <- merge(authors, books, by.x = "surname", by.y = "name")
m1
install.packages("tabplot")
install.packages("tabplotd3")
library(tabplot)
library(tabplot)
tableplot(diamonds, cex=1.08)
tableplot(diamonds, cex=1.8)
tableplot(iris, cex=1.8)
tableplot(books, cex=1.8)
tableplot(iris, cex=1.8)
?tableplot
tableplot(iris, sortCol = 4)
tableplot(iris, sortCol = 5)
install.packages("googlePublicData")
install.packages("googleVis")
library(googleVis)
library(googleVis)
data(Fruits)
M1 <- gvisMotionChart(Fruits, idvar="Fruit", timevar = "Year")
plot(M1)
plot(M1)
install.packages("klaR")
library(klaR)
data(iris)
gw_obj <- greedy.wilks(Species~., data=iris, niveau=0.1)
gw_obj
iris2 <- iris[,c(1,3,5)]
iris2
plineplot(Species~., data=iris2, method="lda", x=iris[,4], xlab="Petal.Width")
plineplot(Species~., data=iris2, method="lda", x=iris[,4], xlab="Petal.Width")
plineplot(Species~., data=iris2, method="lda", x=iris[,4], xlab="Petal.Width")
library(party)
iris$Petal.Width
iris$Petal.Width.c <- cut(iris$Petal.Width, 5)
iris$Petal.Width.c
?cut
a<-ctree(Species~.,data=iris)
plot(a)
a<-ctree(Species~.,data=iris)
plot(a)
plot(a)
a
plot(a)
dev.off()
plot(a)
data("airquality")
airquality
colnames(airquality)
plot(summary(airquality))
summary(airquality)
boxplot(airquality)
attributes(airquality)
aqm<-melt(airquality, id=c("month","day"), na.rm=T)
aqm<-melt(airquality, id=c("Month","Day"), na.rm=T)
aqm
head(aqm)
cast(aqm, month ~ variable, mean)
library(reshape2)
cast(aqm, month ~ variable, mean)
dcast(aqm, month ~ variable, mean)
install.packages("reshape")
library(reshape)
cast(aqm, month ~ variable, mean)
?cast(aqm, month ~ variable, mean)
library(reshape)
?cast(aqm, Month ~ Variable, mean)
cast(aqm, Month ~ Variable, mean)
attributes(airquality)
aqm<-melt(airquality, id=c("Month","Day"), na.rm=T)
head(aqm)
cast(aqm, Month ~ variable, mean)
remove.packages("reshape")
tmp2 <- cast(aqm, Month ~ variable, c(var, mean, min, max))
tmp2
attribute(tmp2)
attributes(tmp2)
attributes(aqm)
install.packages(c("raster", "rasterVis"))
install.packages("rgdal")
library(caret)
library(plyr)
library(reshape2)
library(reshape)
setwd("D:\\work\\metricstudy\\rstudy")
rm(list=ls())
load("stock.rdata")
ls()
colnames(stock)
head(stock)
stock$name <- iconv(stock$name,"UTF8","CP949")
str(stock)
head(stock)
min(stock$date);max(stock$date)
class(stock)
NROW(stock)
cast(data=stock, code ~ Close, fun=max)
stock2 <- stock[date >= "20140601" && date <= "20140831"]
stock2 <- stock[date >= "20140601" & date <= "20140831",]
stock2 <- stock[date >= "20140601" && date <= "20140831",]
data(stock)
setwd("D:\\work\\metricstudy\\rstudy")
rm(list=ls())
load("stock.rdata")
ls()
data(stock)
stock
stock$name <- iconv(stock$name,"UTF8","CP949")
str(stock)
head(stock)
min(stock$date);max(stock$date)
class(stock)
NROW(stock)
data(stock)
stock2 <- stock[date >= "20140601" && date <= "20140831",]
install.packages("arules")
library(arules)
data("AdultUCI")
data(AdultUCI)
AdultUCI
view(AdultUCI)
View(AdultUCI)
colnames(AdultUCI)
colnames(AdultUCI)
nrow(AdultUCI)
train <- AdultUCI[is.na(income)]
train <- AdultUCI[is.na(income),]
is.na(income)
is.na(AdultUCI$income)
train <- AdultUCI[is.na(AdultUCI$income),]
head(train)
head(train)
train
train <- AdultUCI[!is.na(AdultUCI$income),]
head(train)
head(test)
test  <- AdultUCI[is.na(AdultUCI$income),]
head(test)
idx <- sample(2, nrow(train), replace=F, prob=c(0.8, 0.2))
idx <- sample(c(0,1), nrow(train), replace=F, prob=c(0.8, 0.2))
idx <- sample(2, nrow(train), replace=F, prob=c(0.8, 0.2))
idx <- sample(2, nrow(train), replace=T, prob=c(0.8, 0.2))
idx
nrow(idx==1)
NROW(idx==2)
table(idx)
table.prob(table(idx))
prob.table(table(idx))
table.prob(table(idx))
idx <- sample(2, nrow(train), replace=T, prob=c(0.8, 0.2))
table(idx)
train <- titanic.raw[idx==1,]
ts.train <- train[idx==0,]
ts.test  <- train[idx==1,]
NROW(ts.train)
ts.train
ts.train <- train[idx==1,]
ts.test  <- train[idx==2,]
NROW(ts.train)
NROW(ts.test)
library(randomForest)
randomForest(x = ts.train)
library(caret)
rf1<-train(income~., data=ts.train, method="rf")
sapply(ts.train, f)
f<-sum(is.na(col))
sapply(ts.train, f)
f<-function(col) sum(is.na(col))
sapply(ts.train, f)
NROW(ts.train)
table(ts.train$occupation)
table(AdultUCI)
AdultUCI
colnames(AdultUCI)
summary(AdultUCI$income~.)
library(Amelia)
install.packages("Amelia")
library(arules)
data(AdultUCI)
AdultUCI[["fnlwgt"]] <- NULL
AdultUCI[["education-num"]] <- NULL
AdultUCI[["age"]] <- ordered(cut(AdultUCI[["age"]], c(15,25, 45, 65, 100)), labels = c("Young", "Middle-aged","Senior", "Old"))
AdultUCI[["hours-per-week"]] <- ordered(cut(AdultUCI[["hours-per-week"]],c(0, 25, 40, 60, 168)), labels = c("Part-time", "Full-time","Over-time", "Workaholic"))
AdultUCI[["capital-gain"]] <- ordered(cut(AdultUCI[["capital-gain"]],c(-Inf, 0, median(AdultUCI[["capital-gain"]][AdultUCI[["capital-gain"]] > 0]), Inf)), labels = c("None", "Low", "High"))
AdultUCI[["capital-loss"]] <- ordered(cut(AdultUCI[["capital-loss"]],c(-Inf, 0, median(AdultUCI[["capital-loss"]][AdultUCI[["capital-loss"]] >0]), Inf)), labels = c("none", "low", "high"))
Adult <- as(AdultUCI, "transactions")
Adult
#Itemsets:
itemFrequencyPlot(Adult)
#Itemsets with support >=0.1
itemFrequencyPlot(Adult, support = 0.1, cex.names = 0.8)
#Association rules with support>=0.01 and confidence >=0.6
rules <- apriori(Adult, parameter = list(support = 0.01, confidence = 0.6))
summary(rules)
rulesIncomeSmall <- subset(rules, subset = rhs %in% "income=small" & lift > 1.2)
rulesIncomeLarge <- subset(rules, subset = rhs %in% "income=large" & lift > 1.2)
inspect(head(sort(rulesIncomeSmall, by = "confidence"), n = 3))
gc()
library(arules)
library(randomForest)
library(caret)
library(Amelia)
data(AdultUCI)
colnames(AdultUCI)
nrow(AdultUCI)
missmap(AdultUCI, col = c("yellow", "black"))
missmap(AdultUCI, col = c("yellow", "black"))
table(AdultUCI$`native-country`)
table(AdultUCI$occupation)
table(AdultUCI$`native-country`)
table(AdultUCI$occupation)
NROW(AdultUCI[is.na(AdultUCI$occupation)])
nrow(AdultUCI[is.na(AdultUCI$occupation)])
is.na(AdultUCI$occupation)
NROW(is.na(AdultUCI$occupation))
NROW(AdultUCI$occupation)
NROW(is.na(AdultUCI$occupation))
AdultUCI$occupation
is.na(NA)
is.na('asdf')
NROW(is.na(AdultUCI$occupation))
sum(is.na(AdultUCI$occupation))
sum(AdultUCI$occupation)
sum(!is.na(AdultUCI$occupation))
AdultUCI[is.na(AdultUCI$occupation)]
is.na(AdultUCI$occupation)
AdultUCI[AdultUCI$occupation==NA]
AdultUCI[AdultUCI$occupation==NA,]
AdultUCI[,AdultUCI$occupation==NA]
AdultUCI[(AdultUCI$occupation==NA)]
subset(AdultUCI, select=is.na(AdultUCI$occupation))
subset(AdultUCI, is.na(AdultUCI$occupation))
head(subset(AdultUCI, is.na(AdultUCI$occupation)))
table(AdultUCI$education)
occ<-subset(AdultUCI, is.na(AdultUCI$occupation))
occ
table(occ$education)
table(occ$workclass)
table(occ$education)
NROW(occ$workclass)
NROW(occ$education)
table(occ$education)
table(occ$workclass)
occ$workclass
AdultUCI$workclass
table(AdultUCI$workclass)
sum(table(AdultUCI$workclass))
sum(table(occ$workclass))
vset  <- AdultUCI[is.na(AdultUCI$income),]
head(vset)
train <- AdultUCI[!is.na(AdultUCI$income),]
head(train)
idx <- sample(2, nrow(train), replace=T, prob=c(0.8, 0.2))
table(idx)
ts.train <- train[idx==1,]
ts.test  <- train[idx==2,]
NROW(ts.train)
NROW(ts.test)
NROW(vs)
vs  <- AdultUCI[is.na(AdultUCI$income),]
head(vs)
train <- AdultUCI[!is.na(AdultUCI$income),]
head(train)
idx <- sample(2, nrow(train), replace=T, prob=c(0.8, 0.2))
table(idx)
ts.train <- train[idx==1,]
ts.test  <- train[idx==2,]
NROW(ts.train)
NROW(ts.test)
NROW(vs)
f<-function(col) sum(is.na(col))
sapply(ts.train, f)
rf1<-train(income~., data=ts.train, method="rf")
data.raw <- subset(AdultUCI, select=-c("workclass", "native-country", "occupation"))
data.raw <- subset(AdultUCI, select=-c(workclass, native-country, occupation))
data.raw <- subset(AdultUCI, select=-c(workclass, `native-country``, occupation))
data.raw <- subset(AdultUCI, select=-c(workclass, `native-country`, occupation))
data.raw <- subset(AdultUCI, select=-c(workclass, AdultUCI$`native-country`, occupation))
data.raw <- subset(AdultUCI, select=-c(AdultUCI$workclass, AdultUCI$`native-country`, AdultUCI$occupation))
data.raw
data.raw <- subset(AdultUCI, select=-c(workclass, occupation))
data.raw
data.raw <- subset(AdultUCI, select=-c(workclass, `native-country`, occupation))
colnames(data.raw)
vs  <- data.raw[is.na(data.raw$income),]
head(vs)
train <- data.raw[!is.na(data.raw$income),]
head(train)
idx <- sample(2, nrow(train), replace=T, prob=c(0.8, 0.2))
table(idx)
ts.train <- train[idx==1,]
ts.test  <- train[idx==2,]
NROW(ts.train)
NROW(ts.test)
NROW(vs)
rf1 <- train(income~., data=ts.train, method="rf")
warnings()
